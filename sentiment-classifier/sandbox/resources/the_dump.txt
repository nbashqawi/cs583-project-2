From data.utils.py

#count_vect = CountVectorizer()
#X_train_counts = count_vect.fit_transform(obama_train_X)
#tfidf_transformer = TfidfTransformer()
#X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)
#clf = MultinomialNB().fit(X_train_tfidf, obama_train_y)
#X_new_counts = count_vect.transform(obama_test_X)
#X_new_tfidf = tfidf_transformer.transform(X_new_counts)
#predicted = clf.predict(X_new_tfidf)

#print(obama_dataframe['Annotated Tweet'].apply(alteredTweetTokenize))

#for actual, estimate in zip(predicted, obama_test_y):
#    print("Actual: %f, Estimate: %f" % (actual, estimate))

#print("\n")
#print(metrics.classification_report(obama_test_y, predicted))
#print("Accuracy: %f" % np.mean(predicted == obama_test_y))
#print("\n")

def stratifiedIndices(y, bin_size, folds):
    pos_data = y[y == 1]
    neg_data = y[y == -1]
    neu_data = y[y == 0]
        
    shuffled_pos_indices = y.index[y.loc['Class'] == 1]
    shuffled_neg_indices = np.random.permutation(len(neg_data))
    shuffled_neutral_indices = np.random.permutation(len(neu_data))
        
    print(y.iloc[shuffled_pos_indices])
        
    pos_to_take = int(len(pos_data)/len(y) * bin_size)
    neg_to_take = int(len(neg_data)/len(y) * bin_size)
    neu_to_take = bin_size - pos_to_take - neg_to_take
    
    #print(bin_size)
    #print(pos_to_take)
    #print(neg_to_take)
    #print(neu_to_take)
    
    stratified_indicies = []
    
    for idx in range(0,folds):
        stratified_indicies.extend(shuffled_pos_indices[idx*pos_to_take:(idx+1)*pos_to_take])
        stratified_indicies.extend(shuffled_neg_indices[idx*neg_to_take:(idx+1)*neg_to_take])
        stratified_indicies.extend(shuffled_neutral_indices[idx*neu_to_take:(idx+1)*neu_to_take])
    
    #print(y[stratified_indicies])
    
#stratifiedIndices(romney_dataframe['Class'], int(len(obama_dataframe['Class'])/10), 10)